/*
 * This file is generated by jOOQ.
 */
package generated.tables


import generated.Indexes
import generated.Keys
import generated.Public
import generated.tables.records.CustomerRecord

import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.math.BigDecimal
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Customer {

  /**
   * The reference instance of <code>public.customer</code>
   */
  val CUSTOMER = new Customer
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.11.11"
  ),
  comments = "This class is generated by jOOQ"
)
class Customer(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, CustomerRecord],
  aliased : Table[CustomerRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[CustomerRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[CustomerRecord] = {
    classOf[CustomerRecord]
  }

  /**
   * The column <code>public.customer.id</code>.
   */
  val ID : TableField[CustomerRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('customer_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>public.customer.name</code>.
   */
  val NAME : TableField[CustomerRecord, String] = createField("name", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), "")

  /**
   * The column <code>public.customer.age</code>.
   */
  val AGE : TableField[CustomerRecord, Integer] = createField("age", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>public.customer.address</code>.
   */
  val ADDRESS : TableField[CustomerRecord, String] = createField("address", org.jooq.impl.SQLDataType.CHAR(25), "")

  /**
   * The column <code>public.customer.salary</code>.
   */
  val SALARY : TableField[CustomerRecord, BigDecimal] = createField("salary", org.jooq.impl.SQLDataType.NUMERIC(18, 2), "")

  /**
   * Create a <code>public.customer</code> table reference
   */
  def this() = {
    this(DSL.name("customer"), null, null, null, null)
  }

  /**
   * Create an aliased <code>public.customer</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), null, null, generated.tables.Customer.CUSTOMER, null)
  }

  /**
   * Create an aliased <code>public.customer</code> table reference
   */
  def this(alias : Name) = {
    this(alias, null, null, generated.tables.Customer.CUSTOMER, null)
  }

  private def this(alias : Name, aliased : Table[CustomerRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, CustomerRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, generated.tables.Customer.CUSTOMER, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.CUSTOMER_PKEY)
  }

  override def getIdentity : Identity[CustomerRecord, Integer] = {
    Keys.IDENTITY_CUSTOMER
  }

  override def getPrimaryKey : UniqueKey[CustomerRecord] = {
    Keys.CUSTOMER_PKEY
  }

  override def getKeys : List[ UniqueKey[CustomerRecord] ] = {
    return Arrays.asList[ UniqueKey[CustomerRecord] ](Keys.CUSTOMER_PKEY)
  }

  override def as(alias : String) : Customer = {
    new Customer(DSL.name(alias), this)
  }

  override def as(alias : Name) : Customer = {
    new Customer(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Customer = {
    new Customer(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Customer = {
    new Customer(name, null)
  }
}
